#!/usr/bin/env bash

# Copy/link this file somewhere inside your path
# This is the bash machinery to power docker builds, deployments and image/container manipulation for various edw projects.
# This file holds all the logic save for extendable specific bits that located in each project build/deploy repo
# and are meant to be sourced inside this file


##  Init

case $TERM in
    *xterm*)
        color_prompt=yes
        # mac's bash (3.x) does not have fall through '&;' :-(
        ;;
    *color*)
        color_prompt=yes
        ;;
    *)
        color_prompt=no
        ;;
esac

if [ "$color_prompt" = yes ]; then
    White="[m[K"
    Red="[0;31m[K"
    Green="[0;32m[K"
    Yellow="[0;33mK"
    Blue="[0;34mK"
else
    White=
    Red=
    Green=
    Yellow=
    Blue=
fi
True=0
False=1

export g_env_file=.env


## Helper functions

_edw_set_env() {
    while read -r ln; do
        [[ -z "$ln" || "$ln" == \#* ]] || export $ln
    done < $1
}

_edw_get_index() {
    local value=$1
    shift
    # pass the rest of array as arguments to this function
    local arr=($*)
    local indexes=${!arr[@]}

    for i in ${indexes[@]}; do
        if [[ ${arr[$i]} = $value ]]; then
            echo $i
            return $True
        fi
    done
    return $False
}

_edw_resolve_build_interpolated_var() {
    local name="EDW_BUILD_${1}${2}"
    eval res=\$$name
    echo $res
}

_edw_bail_out_if_error() {
    local verbose="$1"
    if [ "$?" != 0 ]; then
        if [ -n "$verbose" ]; then
            echo "${Red}Somehing went wrong!${Yellow}Please manually investigate ${Green}${EDW_DEPLOY_HOST}${White}"
        fi
        exit 1
    fi
}

_edw_show_run_context() {
    OPTIND=1
    local confirmation=

    echo -e "${Yellow}=======================================================${White}\n"
    echo "Building in dir: `pwd`"

    #
    # -e show environment
    # -d show deploy manifest
    # -s show command specific info
    # -y don't ask for confirmation; assume confirmation
    while getopts ":e:dys" opt; do
        case "$opt" in
            e)
                echo -e "\n${Yellow}Running eviroment vars:${White}"
                env |grep -e"^${OPTARG}" |sort
                ;;
            d)
                echo -e "\n${Yellow}Using files manifested in deploy.manifest:"
                echo -e " (Make sure these files exist relative to current directory and contain proper configuration)${White}"
                cat deploy.manifest
                ;;
            s)
                echo -e "\n${Yellow}Command specific context:${White}"
                _edw_command_specific_show_run_context
                ;;
            y)
                confirmation=y
                ;;
            ?)
                echo "Invalid option: -$OPTARG" >&2
                _edw_help
                exit 1
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                _edw_help
                exit 1
                ;;
        esac
    done

    echo -e "\n${Yellow}=======================================================${White}"
    echo

    if [ -z "$confirmation" ]; then
        echo "${Yellow}Are you sure you want to proceed? (y/n)${White}"
        read confirmation
    fi

    if [ "$confirmation" != "y" -a "$confirmation" != "Y" ]; then
        return $False
    else
        return $True
    fi
}

_edw_full_docker_image() {
    local repo=$EDW_BUILD_DOCKERHUB
    local tag=$EDW_BUILD_VER

    OPTIND=1
    while getopts ":r:t:" opt; do
        case "$opt" in
            r)
                repo=$OPTARG
                ;;
            t)
                tag=$OPTARG
                ;;
            ?)
                echo "Invalid option: -$OPTARG" >&2
                _edw_help
                exit 1
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                _edw_help
                exit 1
                ;;
        esac
    done
    shift $((OPTIND-1))
    local name=$1
    [ -z "$name" ] && echo "Give a subproject base name to form the docker image name" >&2

    echo -n ${repo}/${EDW_BUILD_PROJECT}_${name}:${tag}
}

_edw_projects_images() {
    # init output vars
    local docker_only=${1:-true}
    # reset array; this is the array from whatever instance of bash is calling this in its own bash context
    arr_docker_images=()

    cd build
    for dir in $(find * -maxdepth 0 -type d -print); do
        if [ -n "$dir" ]; then
            if [ $docker_only = false -o -f $dir/Dockerfile ]; then
                arr_docker_images+=("$dir")
            fi
        fi
    done
    cd - >/dev/null
}

_edw_id_by_service() {
    local include_stopped=
    if [ -n "$2" ]; then
        include_stopped="-a"
    fi
    local id=`ssh $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST docker ps "$include_stopped" -q -f label=name=$1`
    echo $id
}

## Commands

cmds=(
"attach"
"build"
"debug"
"deploy"
"exec"
"lockdown"
"log"
"rm"
"run"
"up"
"stop"
"show_context"
)

_edw_help() {
    echo -e "Docker wrapper for various edw projects"
    echo -e "This util will run docker images build, deploy, start and maintenace scripts"
    echo -e "taking into consideration the variables from the current directory"
    echo -e "Usage: edwd [options] command [command options]"
    echo -e "\t-e <env file>:  Source env vars from this file into edwd machinery; default is .env; don't export the vars, they are meant to live only inside this script."
    echo -e "Other options"
    echo -e "\t-h:  Show this help"
    echo
    echo -e "Commands (edwd command -h for help):"
    for c in ${cmds[@]}; do
        echo -e "\t$c"
    done
}

_edw_commands() {
    echo "
build"
}


# this function will start its own shell;
# Thus it will not overwrite parent functions and definitios
_edw_build_caged() (
    OPTIND=1

    _edw_help() {
        echo -e "Build a docker image based build dir in cwd and variables present in runtime environment."
        echo -e "\$EDW_BUILD_<proj_component_name>_SRC var, if present, will specify the git repo to clone for each component"
        echo -e "Usage:"
        echo -e "\t-p projects:  Build only the following comma separated (no space) list of projects."
        echo -e "\t\tDefault, all subdirs of build with Dockerfile"
        echo -e "\t-n:  no-push, Do not create git tag AND do not push image to docker.hub; Default is false"
        echo -e "Other options:"
        echo -e "\t-y:  confirmed; Do not ask for user confirmation from stdin; Default is false"
        echo -e "\t-q:  quiet mode; Do not output on stdout; Assume -y; Default is false"
        echo -e "\t-h:  help; Display this message"
}
    
    tag=$EDW_BUILD_VER
    git_tag=${EDW_BUILD_PROJECT}.docker_${tag}
    no_push=false
    quiet=false
    confirmation=
    arr_docker_images=()

    while getopts ":hqynp:" opt; do
        case "$opt" in
            p)
                IFS=',' read -a arr_docker_images <<<$OPTARG
                ;;
            n)
                no_push=true
                ;;
            q)
                quiet=true
                confirmation=-y
                ;;
            y)
                confirmation=-y
                ;;
            h)
                _edw_help
                exit 0
                ;;
            ?)
                echo "Invalid option: -$OPTARG" >&2
                _edw_help
                exit 1
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                _edw_help
                exit 1
                ;;
        esac
    done

    shift $((OPTIND-1))

    # only if array not already filled; check only for the presence of first element
    if [ -z "$arr_docker_images" ]; then
        _edw_projects_images
    fi

    # define this before calling _edw_show_run_context
    _edw_command_specific_show_run_context() {
        if [ "$no_push" = false ]; then
            echo "We shall ${Red}push tags${White} to git (${Yellow}${git_tag}${White}) and docker.hub (${Yellow}${tag}${White})"
        else
            echo "We shall ${Red}NOT push tags${White} to git (${Yellow}${git_tag}${White}) and docker.hub (${Yellow}${tag}${White})"
        fi
        echo "Building projects ${Green}${arr_docker_images[@]}${White}"
        for proj in ${arr_docker_images[@]}; do
            local repo=`_edw_get_src_repo $proj`
            local branch_or_tag=`_edw_get_src_brach_or_tag $proj`
            local branch_or_tag=${branch_or_tag:-master}
            if [ -n "$repo" ]; then
                echo -n "Building ${Green}${proj}${White} from git ${Yellow}${repo}${White} branch ${Yellow}${branch_or_tag}${White}"
            else
                echo -n "Building ${Green}${proj}${White} (no source required/specified)"
            fi
            echo " into image: ${Yellow}`_edw_full_docker_image -t $tag $proj`${White}"

        done
    }

    _edw_get_src_repo() {
        local proj=$1
        local src_repo_and_branch=`_edw_resolve_build_interpolated_var $proj _SRC`
        # don't use read arrays here because we got this var from eval and space.. sucks in bash
        # don't use this for more than 2 args
        echo ${src_repo_and_branch%%,*}
    }

    _edw_get_src_brach_or_tag() {
        local proj=$1
        local src_repo_and_branch=`_edw_resolve_build_interpolated_var $proj _SRC`
        local branch_or_tag=${src_repo_and_branch##*,}
        echo ${branch_or_tag##branch_or_tag=}
    }

    _edw_copy_local_src() {
        local src=$1
        local dest=$2
        for f in `ls -a $src/`; do
            [ "$f" = .git -o "$f" = . -o "$f" = .. ] && continue
            # TODO what to do with symlinks? copy them as are and let docker daemon default behaviour kick in 
            cp -R $src/$f $dest/
        done
    }
    
    go_on=$False
    if [ "$quiet" = false ]; then
        _edw_show_run_context -e EDW_BUILD_ -s "$confirmation"
        go_on=$?
    else
        go_on=$True
    fi
    [ $go_on = $False ] && exit 0

    tmp_name=edwd.${PPID}.$$.${RANDOM}
    mkdir -p $tmp_name
    # for each project - build docker image
    for proj in ${arr_docker_images[@]}; do
        # get source repo to clone;
        src_dir=
        repo=`_edw_get_src_repo $proj`
        branch_or_tag=`_edw_get_src_brach_or_tag $proj`
        branch_or_tag=${branch_or_tag:-master}
        build_args=()

        # we have a repo to get specific sources from
        if [ -n "$repo" ]; then
            cd $tmp_name
            git clone --depth 1 --branch ${branch_or_tag} --single-branch $repo $proj &&\
                src_dir=${tmp_name}/${proj}
            cd - >/dev/null
        fi

        if [ -n "$src_dir" ]; then
            build_args+=("--build-arg EDW_BUILD_SRC_DIR=$src_dir")
        fi
        # add build specific vars
        for v in `grep EDW_BUILD_${proj}_ $g_env_file`; do
            build_args+=("--build-arg $v")
        done

        if [ $quiet = false ]; then
            echo
            echo -n "[ ${Green}${proj}${White} ] "
            echo "docker build -t `_edw_full_docker_image -t $tag $proj` ${build_args[@]} -f build/$proj/Dockerfile ."
        fi
        docker build -t `_edw_full_docker_image -t $tag $proj` ${build_args[@]} -f build/$proj/Dockerfile .
        local push_ok=$?

        local prev_img_id=$(docker images $(_edw_full_docker_image -t latest $proj) -q)
        local current_img_id=$(docker images $(_edw_full_docker_image -t $tag $proj) -q)
        if [ "$prev_img_id" != "$current_img_id" ]; then
            # -f to delete both the version tag and latest tag
            docker rmi -f $prev_img_id 2>/dev/null
            docker tag `_edw_full_docker_image -t $tag $proj` `_edw_full_docker_image -t latest $proj`
        fi

        if [ $push_ok = 0 -a $no_push = false ]; then
            docker push `_edw_full_docker_image -t $tag $proj`
            _edw_bail_out_if_error
            if [ -n "$src_dir" ]; then
                # assert [ -n "$repo" ]
                cd $src_dir
                git tag ${git_tag} && git push origin ${git_tag}
                cd -
            fi
        fi

    done

    if [ -d "$tmp_name" ]; then
        rm -rf $tmp_name
    fi
    
)

_edw_deploy_caged() (
    OPTIND=1

    _edw_help() {
        echo -e "Deploy project based images from docker.hub and deployment files from deploy.manifest"
        echo -e "\tUsage:"
        echo -e "\t-p projects:  Deploy only the following comma separated list (no space) of projects."
        echo -e "\t-n:  no-pull, Do not pull images from docker.hub; assume they are present locally; Default is false"
        echo -e "\t-s:  no-start, Don't start docker suite after deploy. Use if you want to do additional housekeeping right after deploy. Default is false."
        echo -e "\t-f:  force, Do deploy even if lockdown_deploy file is present in target dir. Default is false"
        echo -e "\t-o:  own, Do deploy even on own machine. Default is false"
        echo -e "Other options"
        echo -e "\t-y:  confirmed; Do not ask for user confirmation from stdin; Default is false"
        echo -e "\t-q:  quiet mode; Do not output on stdout; Assume -y; Default is false"
        echo -e "\t-h:  help; Display this message"
    }

    tag=$EDW_BUILD_VER
    no_pull=false
    quiet=false
    confirmation=
    disregard_deploy_lock=false
    no_start=false
    own_machine_deploy=false
    arr_docker_images=()


    while getopts ":hqynsfop:" opt; do
        case "$opt" in
            p)
                IFS=',' read -a arr_docker_images <<<$OPTARG
                ;;
            n)
                no_pull=true
                ;;
            s)
                no_start=true
                ;;
            f)
                disregard_deploy_lock=true
                ;;
            o)
                own_machine_deploy=true
                ;;
            q)
                quiet=true
                confirmation=-y
                ;;
            y)
                confirmation=-y
                ;;
            h)
                _edw_help
                exit 0
                ;;
            ?)
                echo "Invalid option: -$OPTARG" >&2
                _edw_help
                exit 1
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                _edw_help
                exit 1
                ;;
        esac
    done

    shift $((OPTIND-1))

    if [ -z "$arr_docker_images" ]; then
        _edw_projects_images
    fi

    # TODO Redo this based only on grep -e'^EDW_BUILD_VER' .env|sed -e's/EDW_BUILD_VER=\(.*\)$/\1/' for current ver
    # and docker tags for latest and old, similar to how build deletes previous image, but keeping 2 latest images
    local current_ver=`ssh -q $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR 2>/dev/null &&\
        [ -f .current_tag ] && cat .current_tag" 2>/dev/null`
    local old_ver=`ssh -q $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR 2>/dev/null &&\
        [ -f .old_tag ] && cat .old_tag" 2>/dev/null`
    local old_old_ver=`ssh -q $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR 2>/dev/null &&\
        [ -f .old_old_tag ] && cat .old_old_tag" 2>/dev/null`

    # define this before calling _edw_show_run_context
    _edw_command_specific_show_run_context() {
        if [ "$no_pull" = false ]; then
            echo "We shall ${Red}pull${White} images from docker.hub (${Yellow}$tag${White})"
        else
            echo "We shall ${Red}NOT pull${White} images from docker.hub"
        fi

        if [ "$disregard_deploy_lock" = true ]; then
            echo "We shall ${Red}force deploy${White}. Disregarding ${Yellow}lockdown_deploy${White} if present on host"
        fi

        if [ "$no_start" = true ]; then
            echo "We shall ${Red}NOT restart${White} docker-compose suite after deploy"
        else
            echo "We shall ${Red}restart${White} docker-compose suite after deploy"
        fi
        for proj in ${arr_docker_images[@]}; do
            local image_name=`_edw_full_docker_image -t $tag $proj`
            echo "${Green}${proj}${White}: ${Yellow}${image_name}${White}"
        done

        if [ "$EDW_DEPLOY_HOST" = localhost ]; then
            echo -n "Deploy target is ${Yellow}own machine${White}. "
            if [ $own_machine_deploy = true ]; then
                echo "${Red}Doing deploy${White} anyway."
            else
                echo "${Yellow}Skipping deploy${White}."
            fi
        fi
        if [ -n "$current_ver" ];then
            echo "Current version on ${Yellow}${EDW_DEPLOY_HOST}:${EDW_DEPLOY_DIR}${White} is: ${Yellow}${current_ver}${White}"
        fi
    }

    go_on=$False
    if [ "$quiet" = false ]; then
        # show all env vars here as they will all end up on Host machine
        _edw_show_run_context -e EDW_ -ds "$confirmation"
        go_on=$?
    else
        go_on=$True
    fi
    [ $go_on = $False ] && exit 0
    if [ "$EDW_DEPLOY_HOST" = localhost -a $own_machine_deploy = false ]; then
        exit 0
    fi


    # create deploy folder if it does not exist. We assume this is inside EDW_DEPLOY_USER path
    ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR 2>/dev/null || mkdir -p $EDW_DEPLOY_DIR"
    _edw_bail_out_if_error

    if [ "$disregard_deploy_lock" = false ]; then
        ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && [ -f lockdown_deploy ] && cat lockdown_deploy && exit 100"
        if [ "$?" = 100 ]; then
            echo "Stopping deployment due to lockdown_deploy in $EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR"
            exit 1
        fi
    fi

    # define stubs; meant to be overriden down below
    _edw_project_specific_pre() { true; }
    _edw_project_specific_post() { true; }
    if [ -f deploy/$proj/project-specific.sh ]; then
        . deploy/$proj/project-specific.sh
    fi

    _edw_project_specific_pre

    for f in `cat deploy.manifest`; do
        local dir=`dirname $f`
        ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && [ -d "$dir" ] || mkdir -p $dir"
        if [ -f $f ]; then
            scp $f $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR/$f
        elif [ -d $f ]; then
            ssh -q $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && [ -d "${dir}/${f}" ] || mkdir $f"
        # always turn absolute paths into dirs
        elif [[ $f == /* ]]; then
            ssh -q $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && [ -d "$f" ] || mkdir $f"
        fi
        _edw_bail_out_if_error
    done

    # add the env vars we've been using. remeber to update whatever was overriden by the command line
    # Do this even if no_pull was used - we are to deploy config to the host even if we don't pull
    scp $g_env_file $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR/.env

    # docker-compose rm -v will only remove unnamed modules (unlike docker-compose down -v)
    # FIXME Why arem't we stopping docker suite if no_pull?!?
    if [ -n "$current_ver" ]; then
        ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && { \
            [ -f lockdown_deploy ] && rm lockdown_deploy ;\
            env `grep -v '^#' .env|xargs` docker-compose stop 2>/dev/null ;\
            if [ $no_pull = false ]; then \
                env `grep -v '^#' .env|xargs` docker-compose rm -f -v ;\
            fi ;\
            }"
    fi


    for proj in ${arr_docker_images[@]}; do
        local partial_image_name=`_edw_full_docker_image -t\  $proj`
        local image_name=`_edw_full_docker_image -t $tag $proj`

        # make sure you don't remove the imediate previous image - we need it for revert
        if [ $no_pull = false ]; then
            ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && { \
                docker pull $image_name ;\
                if [ -f .old_old_tag ] && [ \"$old_old_ver\" != $tag ] && [ \"$old_old_ver\" != \"$old_ver\" ]; then \
                    docker rmi ${partial_image_name}${old_old_ver} || true ;\
                fi ;\
                }"
        fi
        _edw_bail_out_if_error
        # TODO
        # should apply some init/bare-init scripts here.
        # - add some option for bare, init, some other updates?
        # - these are project specific? source something from proj.docker folder here?
        # - exec the r-init.sh scripts blindly? order matters, at the moment we process subprojects unordered!
        # Right now just use with -s (no-start) and do this kind of stuff manually
    done

    # set the tag history right
    if [ $no_pull = false ]; then
        ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && { \
            if [ -f .current_tag ]; then \
                if [ -f .old_tag ]; then \
                    cp .old_tag .old_old_tag ;\
                fi ;\
                cp .current_tag .old_tag ;\
            fi ;\
            echo -n $tag > .current_tag ;\
        }"
    fi

    _edw_project_specific_post

    if [ "$no_start" = false ]; then
        ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR &&\
            EDW_BUILD_VER=$EDW_BUILD_VER docker-compose up -d
            "
    fi

)

_edw_attach() {
    if [ "$1" = '-h' ]; then
        echo "Attach to the container corresponding to the given service; by default 'web'"
        echo "ctrl+p, ctrl+q to detach without killing the container"
        echo
        echo "Note that containers not originating from our Dockerfiles will not have the label name=service and we can't identify those."
        echo
        echo "Act on $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR"
        exit 0
    fi
    local service=${1:-web}
    local container_id=`_edw_id_by_service $service`
    ssh -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "docker attach $container_id"
}

_edw_debug() {
    if [ "$1" = '-h' ]; then
        echo "Bring the docker suite up. and attach to the given container. By default 'web'"
        echo "Make sure that the targeted service is started with tty and stdin_open so you can interact with the container"
        echo "The purpose of this is to use an interactive debugger placed in the code of the container."
        echo "ctrl+p, ctrl+q to detach without killing the container"
        echo
        echo "Act on $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR"
        exit 0
    fi
    _edw_up
    _edw_attach "$@"
}

_edw_exec() {
    if [ "$1" = '-h' ]; then
        echo "edwd exec [-u user] [service [command] ]. Run the command interactively in the running container of the specified service."
        echo "By default 'web' and 'bash' with the default user of the image"
        echo "Note that the service must be already running and should have been started with 'up' (not 'run')"
        echo
        echo "Act on $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR"
        exit 0
    fi
    local user_opt=
    if [ "$1" = "-u" ]; then
        user_opt="--user=$2"
        shift 2
    fi
    local service=${1:-web}
    local command=${2:-bash}
    ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && env `grep -v '^#' .env|xargs` docker-compose exec $user_opt $service $command"

}
_edw_lockdown_deploy() {
    if [ "$1" = '-h' ]; then
        echo "Put a lock on the Host machine to prevent edwd deploy from acting there"
        echo "edwd deploy -f will ignore this lock and also lift the lockdown"
        echo
        echo "Act on $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR"
        exit 0
    fi
    if [ -z "$1" ]; then
        echo "You must provide a reason for lockdown!"
        exit 1
    fi
    # echo is safe no matter what we have in the variable
    ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && echo $1 > lockdown_deploy"
}

_edw_log() {
    if [ "$1" = '-h' ]; then
        echo "Attach to the stream of logs of the container corresponding to the given service; by default 'web'"
        echo "ctrl+c to exit"
        echo
        echo "Note that containers not originating from our Dockerfiles will not have the label name=service and we can't identify those."
        echo
        echo "Act on $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR"
        exit 0
    fi
    local service=${1:-web}
    local container_id=`_edw_id_by_service $service include_stopped`
    ssh -q $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "docker logs -f --tail=200 $container_id"
}

_edw_rm() {
    if [ "$1" = '-h' ]; then
        echo "Remove all containers and anonymous volumes (named volumes are kept)"
        echo "Also stops the suite."
        echo
        echo "Act on $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR"
        exit 0
    fi
    ssh -q $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && env `grep -v '^#' .env|xargs` docker-compose stop && docker-compose rm -v -f"
}
# But please note that in case of images that chage user in the entrypoint
# rather than in the Dockerfile - the user will be changed by the entrypoint;
# one should choose another --entrypoint in that case.
_edw_run() {
    if [ "$1" = '-h' ]; then
        echo "edwd run [-u user] [service [command] ]. Run the specified service and command interactive;"
        echo "by default 'web' and 'bash' with the default user of the image."
        echo "Note that the service exposed ports will not be published. Use a direct docker-compose command for flexibility"
        echo
        echo "Act on $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR"
        exit 0
    fi
    local user_opt=
    if [ "$1" = "-u" ]; then
        user_opt="--user=$2"
        shift 2
    fi
    local service=${1:-web}
    local command=${2:-bash}
    ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && env `grep -v '^#' .env|xargs` docker-compose run --rm $user_opt $service $command"

}

_edw_up() {
    if [ "$1" = '-h' ]; then
        echo "Bring the docker suite up. By default in background."
        echo "Use edwd up -f to bring it in foreground"
        echo
        echo "Act on $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR"
        exit 0
    fi
    local foreground="$1"

    # Any option you give to this command will be interpreted as "run in foreground"
    # Leave empty to run in background
    if [ -z "$foreground" ]; then
        dettached='-d'
    else
        dettached=
    fi
    ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && env `grep -v '^#' .env|xargs` docker-compose up $dettached"
}

_edw_stop() {
    if [ "$1" = '-h' ]; then
        echo "Stop the docker suite."
        echo
        echo "Act on $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST:$EDW_DEPLOY_DIR"
        exit 0
    fi
    ssh -q -t $EDW_DEPLOY_USER@$EDW_DEPLOY_HOST "cd $EDW_DEPLOY_DIR && env `grep -v '^#' .env|xargs` docker-compose stop $@"
}


## parse main script options 

while getopts ":he:" opt; do
    case "$opt" in
        e)
            g_env_file=$OPTARG
            ;;
        h)
            _edw_help
            exit 0
            ;;
        ?)
            echo "Invalid option: -$OPTARG" >&2
            _edw_help
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            _edw_help
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

_edw_set_env $g_env_file

## Run command

com=$1
shift
case "$com" in
    attach)
        _edw_attach "$@"
        ;;
    build)
        _edw_build_caged "$@"
        ;;
    debug)
        _edw_debug "$@"
        ;;
    deploy)
        _edw_deploy_caged "$@"
        _edw_bail_out_if_error show_message
        ;;
    exec)
        _edw_exec "$@"
        ;;
    lockdown)
        _edw_lockdown_deploy "$@"
        ;;
    log)
        _edw_log "$@"
        ;;
    rm)
        _edw_rm "$@"
        ;;
    run)
        _edw_run "$@"
        ;;
    up)
        _edw_up "$@"
        ;;
    stop)
        _edw_stop "$@"
        ;;
    show_context)
        _edw_show_run_context -e EDW_ -dy
        ;;
esac
